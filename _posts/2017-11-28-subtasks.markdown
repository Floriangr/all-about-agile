---
layout: post
title:  "When to write Subtasks or the principle of "Maximize work not done""
date:   2017-11-28 10:16:30 +0200
categories: Agile
---

Hello fellow Agilistas,

At what point during a sprint should your team write Subtasks for their User Stories? Some may argue Product Backlog Refinement is the right time for this. After all, how can we correctly estimate stories without this information? And doesn't it make sense to think through Stories once and thoroughly?

In this post I want to argue that this approach is not optimal. The better moment to write Subtasks is Sprint Planning II (or simply Sprint Planning for teams which do not follow a LeSS approach). I will first make the case against the early creation of Subtasks , explaining why I consider this excessive inventory. I will then illustrate that writing Subtasks at the beginning of a sprint improves quality of Subtasks and results in less re-thinking of tasks. The post will conclude with connecting this discussion to the general Agile principle "maximize work not done".

First, let's understand the temptation to write Subtasks during Backlog Refinement. At first glance, this makes a lot of sense. During Backlog Refinement the team needs to understand the objective of the story and sketch out an implementation design. This is required to estimate the story and decide whether it needs to be further split. Then why not go one step further and directly create Subtasks . This probably creates some benefit towards improving estimation and splitting decisions. Nevertheless, I am convinced disadvantages due to waste and lower quality of implementation by far outweigh these advantages. I will discuss both points in turn.

Overly early analysis resulting in Subtasks is wasteful. Those are inventory, work-in-progress which is costly due to the time involved in thinking through tasks and writing them down (be it in Jira or on cards). And as in manufacturing, inventory is bad. It blocks capital and goes out of date. Imagine all the accumulated wages of developers, SM and PO as a costly even if invisible heap of inventory the team is carrying. This capital could be spent on value adding work, e.g. getting the next version of a website into production. And not only does it suck up capital, this invisible heap also goes bad. Refined User Stories may take weeks to go into a Sprint or may not make it at all. If they don't, all effort spent on Subtasks was in vain. And even if it takes a couple of weeks, developers may forget their Subtasks and may have to re-think them before starting the coding. Knowing the daily rate of everyone involved in this, this is not good.

In addition to being wasteful, early Subtask writing also may lead to compromises in implementation quality. The closer we get to the start of implementation, the more information is available in terms of the systems we're working with, user needs or technical challenges around a specific functionality. This is especially true for stories which build upon each other, e.g. a MVP functionality followed by an enhancement story. Subtasks written early may not take account of all this information. Nevertheless, the team may assume the analysis to be done at the beginning of a sprint as all Subtasks already exist and not re-think the implementation concept. Work starts and deficient results ensue as important information was not considered.

But don't we need Subtasks to be able to refine stories after all? How can we estimate Stories if we don't know Subtasks? This objection rests in an exaggerated ambition to exactly measure Story Points. Story Points can never be completely accurate. We aim for reasonable estimates: If a Story's "exact" value would be an 8, anything between 6 and 10 is fine, knowing that inaccuracies balance out statistically. What we aim to avoid are large surprises, e.g. a 5-pointer turning out to be one of 15 which would disrupt a sprint. High-level implementation design sketches are generally sufficient to achieve this ambition, Subtasks would only add little further value (of course it doesn't harm if a team member jots down ideas for Subtasks which might result from the design discussion to use in Sprint Planning II). In addition, experience shows that writing Subtasks in Backlog Refinement draws teams into overly technical implementation discussions which are too early at this point.

To conclude, early Subtask writing leads to material costs to the business: capital may be wasted and lower quality features developed. The better alternative for Story writing is Sprint Planning II. At the beginning of the Sprint, the scope of work is clear (i.e. we do not write unnecessary Subtasks ) and information is most recent (i.e. learnings from a previous Story can be considered). Based on this, the team can then develop the most effective plan to done (reflected in Subtasks ) for each Story and does not rest on potentially out-of-date Subtasks .

Now you may find this discussion somewhat technical if you're not working in a Scrum set-up. Nevertheless, I hope the points will still be valuable to you as they illustrate a fundmental principle of Lean or Agile: maximize work not done. This means focusing only on tasks which are really important right now. Avoid unnecessary research, tasks and even thinking and if it is required do it as late as sensible. This give the team the time to focus on the important issues of the day and ensures that output is as up-to-date and relevant. This principle can be applied to many other areas in Agile, e.g. on drafting designs for software (start with a minimum viable design when developers actually need it) or User Stories (start with a high-level epic and only split and add detail near to implementation).

I hope you found this article helpful. Please comment and give feedback, I greatly appreciate your opinions on this.
